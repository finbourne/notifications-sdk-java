/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.notifications.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.notifications.JSON;

/**
 * Holds readonly information about an Email notification
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EmailNotificationTypeResponse {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_PLAIN_TEXT_BODY = "plainTextBody";
  @SerializedName(SERIALIZED_NAME_PLAIN_TEXT_BODY)
  private String plainTextBody;

  public static final String SERIALIZED_NAME_HTML_BODY = "htmlBody";
  @SerializedName(SERIALIZED_NAME_HTML_BODY)
  private String htmlBody;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS_TO = "emailAddressTo";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS_TO)
  private List<String> emailAddressTo;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS_CC = "emailAddressCc";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS_CC)
  private List<String> emailAddressCc;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS_BCC = "emailAddressBcc";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS_BCC)
  private List<String> emailAddressBcc;

  public EmailNotificationTypeResponse() {
  }

  public EmailNotificationTypeResponse type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of delivery mechanism for this notification
   * @return type
  **/
  @jakarta.annotation.Nullable
  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public EmailNotificationTypeResponse subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * The subject of the email
   * @return subject
  **/
  @jakarta.annotation.Nullable
  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public EmailNotificationTypeResponse plainTextBody(String plainTextBody) {
    
    this.plainTextBody = plainTextBody;
    return this;
  }

   /**
   * The plain text body of the email
   * @return plainTextBody
  **/
  @jakarta.annotation.Nullable
  public String getPlainTextBody() {
    return plainTextBody;
  }


  public void setPlainTextBody(String plainTextBody) {
    this.plainTextBody = plainTextBody;
  }


  public EmailNotificationTypeResponse htmlBody(String htmlBody) {
    
    this.htmlBody = htmlBody;
    return this;
  }

   /**
   * The HTML body of the email (if any)
   * @return htmlBody
  **/
  @jakarta.annotation.Nullable
  public String getHtmlBody() {
    return htmlBody;
  }


  public void setHtmlBody(String htmlBody) {
    this.htmlBody = htmlBody;
  }


  public EmailNotificationTypeResponse emailAddressTo(List<String> emailAddressTo) {
    
    this.emailAddressTo = emailAddressTo;
    return this;
  }

  public EmailNotificationTypeResponse addEmailAddressToItem(String emailAddressToItem) {
    if (this.emailAddressTo == null) {
      this.emailAddressTo = new ArrayList<>();
    }
    this.emailAddressTo.add(emailAddressToItem);
    return this;
  }

   /**
   * &#39;To&#39; recipients of the email
   * @return emailAddressTo
  **/
  @jakarta.annotation.Nullable
  public List<String> getEmailAddressTo() {
    return emailAddressTo;
  }


  public void setEmailAddressTo(List<String> emailAddressTo) {
    this.emailAddressTo = emailAddressTo;
  }


  public EmailNotificationTypeResponse emailAddressCc(List<String> emailAddressCc) {
    
    this.emailAddressCc = emailAddressCc;
    return this;
  }

  public EmailNotificationTypeResponse addEmailAddressCcItem(String emailAddressCcItem) {
    if (this.emailAddressCc == null) {
      this.emailAddressCc = new ArrayList<>();
    }
    this.emailAddressCc.add(emailAddressCcItem);
    return this;
  }

   /**
   * &#39;Cc&#39; recipients of the email
   * @return emailAddressCc
  **/
  @jakarta.annotation.Nullable
  public List<String> getEmailAddressCc() {
    return emailAddressCc;
  }


  public void setEmailAddressCc(List<String> emailAddressCc) {
    this.emailAddressCc = emailAddressCc;
  }


  public EmailNotificationTypeResponse emailAddressBcc(List<String> emailAddressBcc) {
    
    this.emailAddressBcc = emailAddressBcc;
    return this;
  }

  public EmailNotificationTypeResponse addEmailAddressBccItem(String emailAddressBccItem) {
    if (this.emailAddressBcc == null) {
      this.emailAddressBcc = new ArrayList<>();
    }
    this.emailAddressBcc.add(emailAddressBccItem);
    return this;
  }

   /**
   * &#39;Bcc&#39; recipients of the email
   * @return emailAddressBcc
  **/
  @jakarta.annotation.Nullable
  public List<String> getEmailAddressBcc() {
    return emailAddressBcc;
  }


  public void setEmailAddressBcc(List<String> emailAddressBcc) {
    this.emailAddressBcc = emailAddressBcc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailNotificationTypeResponse emailNotificationTypeResponse = (EmailNotificationTypeResponse) o;
    return Objects.equals(this.type, emailNotificationTypeResponse.type) &&
        Objects.equals(this.subject, emailNotificationTypeResponse.subject) &&
        Objects.equals(this.plainTextBody, emailNotificationTypeResponse.plainTextBody) &&
        Objects.equals(this.htmlBody, emailNotificationTypeResponse.htmlBody) &&
        Objects.equals(this.emailAddressTo, emailNotificationTypeResponse.emailAddressTo) &&
        Objects.equals(this.emailAddressCc, emailNotificationTypeResponse.emailAddressCc) &&
        Objects.equals(this.emailAddressBcc, emailNotificationTypeResponse.emailAddressBcc);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, subject, plainTextBody, htmlBody, emailAddressTo, emailAddressCc, emailAddressBcc);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailNotificationTypeResponse {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    plainTextBody: ").append(toIndentedString(plainTextBody)).append("\n");
    sb.append("    htmlBody: ").append(toIndentedString(htmlBody)).append("\n");
    sb.append("    emailAddressTo: ").append(toIndentedString(emailAddressTo)).append("\n");
    sb.append("    emailAddressCc: ").append(toIndentedString(emailAddressCc)).append("\n");
    sb.append("    emailAddressBcc: ").append(toIndentedString(emailAddressBcc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("subject");
    openapiFields.add("plainTextBody");
    openapiFields.add("htmlBody");
    openapiFields.add("emailAddressTo");
    openapiFields.add("emailAddressCc");
    openapiFields.add("emailAddressBcc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EmailNotificationTypeResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailNotificationTypeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailNotificationTypeResponse is not found in the empty JSON string", EmailNotificationTypeResponse.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("plainTextBody") != null && !jsonObj.get("plainTextBody").isJsonNull()) && !jsonObj.get("plainTextBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plainTextBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plainTextBody").toString()));
      }
      if ((jsonObj.get("htmlBody") != null && !jsonObj.get("htmlBody").isJsonNull()) && !jsonObj.get("htmlBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `htmlBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("htmlBody").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailAddressTo") != null && !jsonObj.get("emailAddressTo").isJsonNull() && !jsonObj.get("emailAddressTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddressTo` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddressTo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailAddressCc") != null && !jsonObj.get("emailAddressCc").isJsonNull() && !jsonObj.get("emailAddressCc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddressCc` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddressCc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emailAddressBcc") != null && !jsonObj.get("emailAddressBcc").isJsonNull() && !jsonObj.get("emailAddressBcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddressBcc` to be an array in the JSON string but got `%s`", jsonObj.get("emailAddressBcc").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailNotificationTypeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailNotificationTypeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailNotificationTypeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailNotificationTypeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailNotificationTypeResponse>() {
           @Override
           public void write(JsonWriter out, EmailNotificationTypeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailNotificationTypeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailNotificationTypeResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailNotificationTypeResponse
  * @throws IOException if the JSON string is invalid with respect to EmailNotificationTypeResponse
  */
  public static EmailNotificationTypeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailNotificationTypeResponse.class);
  }

 /**
  * Convert an instance of EmailNotificationTypeResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
