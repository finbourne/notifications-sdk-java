/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.notifications.model;

import java.util.Objects;
import com.finbourne.notifications.model.EventFieldDefinition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.notifications.JSON;

/**
 * An EventType object
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class EventTypeSchema {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_HEADER_SCHEMA = "headerSchema";
  @SerializedName(SERIALIZED_NAME_HEADER_SCHEMA)
  private List<EventFieldDefinition> headerSchema;

  public static final String SERIALIZED_NAME_BODY_SCHEMA = "bodySchema";
  @SerializedName(SERIALIZED_NAME_BODY_SCHEMA)
  private List<EventFieldDefinition> bodySchema;

  public static final String SERIALIZED_NAME_HREF = "href";
  @SerializedName(SERIALIZED_NAME_HREF)
  private URI href;

  public EventTypeSchema() {
  }

  
  public EventTypeSchema(
     List<EventFieldDefinition> headerSchema, 
     List<EventFieldDefinition> bodySchema
  ) {
    this();
    this.headerSchema = headerSchema;
    this.bodySchema = bodySchema;
  }

  public EventTypeSchema id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The identifier of the event type
   * @return id
  **/
  @jakarta.annotation.Nullable
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public EventTypeSchema displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Identifier name of the event
   * @return displayName
  **/
  @jakarta.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EventTypeSchema description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The summary of the event
   * @return description
  **/
  @jakarta.annotation.Nullable
  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public EventTypeSchema application(String application) {
    
    this.application = application;
    return this;
  }

   /**
   * The application associated with the event
   * @return application
  **/
  @jakarta.annotation.Nullable
  public String getApplication() {
    return application;
  }


  public void setApplication(String application) {
    this.application = application;
  }


   /**
   * The header schema for the event type
   * @return headerSchema
  **/
  @jakarta.annotation.Nullable
  public List<EventFieldDefinition> getHeaderSchema() {
    return headerSchema;
  }




   /**
   * The body schema for the event type
   * @return bodySchema
  **/
  @jakarta.annotation.Nullable
  public List<EventFieldDefinition> getBodySchema() {
    return bodySchema;
  }




  public EventTypeSchema href(URI href) {
    
    this.href = href;
    return this;
  }

   /**
   * A URI for retrieving this schema
   * @return href
  **/
  @jakarta.annotation.Nullable
  public URI getHref() {
    return href;
  }


  public void setHref(URI href) {
    this.href = href;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventTypeSchema eventTypeSchema = (EventTypeSchema) o;
    return Objects.equals(this.id, eventTypeSchema.id) &&
        Objects.equals(this.displayName, eventTypeSchema.displayName) &&
        Objects.equals(this.description, eventTypeSchema.description) &&
        Objects.equals(this.application, eventTypeSchema.application) &&
        Objects.equals(this.headerSchema, eventTypeSchema.headerSchema) &&
        Objects.equals(this.bodySchema, eventTypeSchema.bodySchema) &&
        Objects.equals(this.href, eventTypeSchema.href);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, description, application, headerSchema, bodySchema, href);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventTypeSchema {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    headerSchema: ").append(toIndentedString(headerSchema)).append("\n");
    sb.append("    bodySchema: ").append(toIndentedString(bodySchema)).append("\n");
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("displayName");
    openapiFields.add("description");
    openapiFields.add("application");
    openapiFields.add("headerSchema");
    openapiFields.add("bodySchema");
    openapiFields.add("href");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventTypeSchema
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventTypeSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventTypeSchema is not found in the empty JSON string", EventTypeSchema.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) && !jsonObj.get("application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application").toString()));
      }
      if (jsonObj.get("headerSchema") != null && !jsonObj.get("headerSchema").isJsonNull()) {
        JsonArray jsonArrayheaderSchema = jsonObj.getAsJsonArray("headerSchema");
        if (jsonArrayheaderSchema != null) {
          // ensure the json data is an array
          if (!jsonObj.get("headerSchema").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `headerSchema` to be an array in the JSON string but got `%s`", jsonObj.get("headerSchema").toString()));
          }

          // validate the optional field `headerSchema` (array)
          for (int i = 0; i < jsonArrayheaderSchema.size(); i++) {
            EventFieldDefinition.validateJsonElement(jsonArrayheaderSchema.get(i));
          };
        }
      }
      if (jsonObj.get("bodySchema") != null && !jsonObj.get("bodySchema").isJsonNull()) {
        JsonArray jsonArraybodySchema = jsonObj.getAsJsonArray("bodySchema");
        if (jsonArraybodySchema != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bodySchema").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bodySchema` to be an array in the JSON string but got `%s`", jsonObj.get("bodySchema").toString()));
          }

          // validate the optional field `bodySchema` (array)
          for (int i = 0; i < jsonArraybodySchema.size(); i++) {
            EventFieldDefinition.validateJsonElement(jsonArraybodySchema.get(i));
          };
        }
      }
      if ((jsonObj.get("href") != null && !jsonObj.get("href").isJsonNull()) && !jsonObj.get("href").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `href` to be a primitive type in the JSON string but got `%s`", jsonObj.get("href").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventTypeSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventTypeSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventTypeSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventTypeSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<EventTypeSchema>() {
           @Override
           public void write(JsonWriter out, EventTypeSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventTypeSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventTypeSchema given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventTypeSchema
  * @throws IOException if the JSON string is invalid with respect to EventTypeSchema
  */
  public static EventTypeSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventTypeSchema.class);
  }

 /**
  * Convert an instance of EventTypeSchema to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
