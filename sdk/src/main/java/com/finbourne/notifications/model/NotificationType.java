/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.notifications.model;

import java.util.Objects;
import com.finbourne.notifications.model.AmazonSqsNotificationType;
import com.finbourne.notifications.model.AmazonSqsPrincipalAuthNotificationType;
import com.finbourne.notifications.model.EmailNotificationType;
import com.finbourne.notifications.model.SmsNotificationType;
import com.finbourne.notifications.model.WebhookNotificationType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import com.finbourne.notifications.JSON;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NotificationType extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(NotificationType.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotificationType.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NotificationType' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AmazonSqsNotificationType> adapterAmazonSqsNotificationType = gson.getDelegateAdapter(this, TypeToken.get(AmazonSqsNotificationType.class));
            final TypeAdapter<AmazonSqsPrincipalAuthNotificationType> adapterAmazonSqsPrincipalAuthNotificationType = gson.getDelegateAdapter(this, TypeToken.get(AmazonSqsPrincipalAuthNotificationType.class));
            final TypeAdapter<EmailNotificationType> adapterEmailNotificationType = gson.getDelegateAdapter(this, TypeToken.get(EmailNotificationType.class));
            final TypeAdapter<SmsNotificationType> adapterSmsNotificationType = gson.getDelegateAdapter(this, TypeToken.get(SmsNotificationType.class));
            final TypeAdapter<WebhookNotificationType> adapterWebhookNotificationType = gson.getDelegateAdapter(this, TypeToken.get(WebhookNotificationType.class));

            return (TypeAdapter<T>) new TypeAdapter<NotificationType>() {
                @Override
                public void write(JsonWriter out, NotificationType value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AmazonSqsNotificationType`
                    if (value.getActualInstance() instanceof AmazonSqsNotificationType) {
                      JsonElement element = adapterAmazonSqsNotificationType.toJsonTree((AmazonSqsNotificationType)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `AmazonSqsPrincipalAuthNotificationType`
                    if (value.getActualInstance() instanceof AmazonSqsPrincipalAuthNotificationType) {
                      JsonElement element = adapterAmazonSqsPrincipalAuthNotificationType.toJsonTree((AmazonSqsPrincipalAuthNotificationType)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `EmailNotificationType`
                    if (value.getActualInstance() instanceof EmailNotificationType) {
                      JsonElement element = adapterEmailNotificationType.toJsonTree((EmailNotificationType)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `SmsNotificationType`
                    if (value.getActualInstance() instanceof SmsNotificationType) {
                      JsonElement element = adapterSmsNotificationType.toJsonTree((SmsNotificationType)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    // check if the actual instance is of the type `WebhookNotificationType`
                    if (value.getActualInstance() instanceof WebhookNotificationType) {
                      JsonElement element = adapterWebhookNotificationType.toJsonTree((WebhookNotificationType)value.getActualInstance());
                      elementAdapter.write(out, element);
                      return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AmazonSqsNotificationType, AmazonSqsPrincipalAuthNotificationType, EmailNotificationType, SmsNotificationType, WebhookNotificationType");
                }

                @Override
                public NotificationType read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AmazonSqsNotificationType
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AmazonSqsNotificationType.validateJsonElement(jsonElement);
                      actualAdapter = adapterAmazonSqsNotificationType;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'AmazonSqsNotificationType'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AmazonSqsNotificationType failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AmazonSqsNotificationType'", e);
                    }
                    // deserialize AmazonSqsPrincipalAuthNotificationType
                    try {
                      // validate the JSON object to see if any exception is thrown
                      AmazonSqsPrincipalAuthNotificationType.validateJsonElement(jsonElement);
                      actualAdapter = adapterAmazonSqsPrincipalAuthNotificationType;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'AmazonSqsPrincipalAuthNotificationType'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for AmazonSqsPrincipalAuthNotificationType failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'AmazonSqsPrincipalAuthNotificationType'", e);
                    }
                    // deserialize EmailNotificationType
                    try {
                      // validate the JSON object to see if any exception is thrown
                      EmailNotificationType.validateJsonElement(jsonElement);
                      actualAdapter = adapterEmailNotificationType;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'EmailNotificationType'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for EmailNotificationType failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'EmailNotificationType'", e);
                    }
                    // deserialize SmsNotificationType
                    try {
                      // validate the JSON object to see if any exception is thrown
                      SmsNotificationType.validateJsonElement(jsonElement);
                      actualAdapter = adapterSmsNotificationType;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'SmsNotificationType'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for SmsNotificationType failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'SmsNotificationType'", e);
                    }
                    // deserialize WebhookNotificationType
                    try {
                      // validate the JSON object to see if any exception is thrown
                      WebhookNotificationType.validateJsonElement(jsonElement);
                      actualAdapter = adapterWebhookNotificationType;
                      match++;
                      log.log(Level.FINER, "Input data matches schema 'WebhookNotificationType'");
                    } catch (Exception e) {
                      // deserialization failed, continue
                      errorMessages.add(String.format("Deserialization for WebhookNotificationType failed with `%s`.", e.getMessage()));
                      log.log(Level.FINER, "Input data does not match schema 'WebhookNotificationType'", e);
                    }

                    if (match == 1) {
                        NotificationType ret = new NotificationType();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for NotificationType: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public NotificationType() {
        super("oneOf", Boolean.FALSE);
    }

    public NotificationType(AmazonSqsNotificationType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public NotificationType(AmazonSqsPrincipalAuthNotificationType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public NotificationType(EmailNotificationType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public NotificationType(SmsNotificationType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public NotificationType(WebhookNotificationType o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AmazonSqsNotificationType", AmazonSqsNotificationType.class);
        schemas.put("AmazonSqsPrincipalAuthNotificationType", AmazonSqsPrincipalAuthNotificationType.class);
        schemas.put("EmailNotificationType", EmailNotificationType.class);
        schemas.put("SmsNotificationType", SmsNotificationType.class);
        schemas.put("WebhookNotificationType", WebhookNotificationType.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return NotificationType.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AmazonSqsNotificationType, AmazonSqsPrincipalAuthNotificationType, EmailNotificationType, SmsNotificationType, WebhookNotificationType
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AmazonSqsNotificationType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AmazonSqsPrincipalAuthNotificationType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EmailNotificationType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SmsNotificationType) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof WebhookNotificationType) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AmazonSqsNotificationType, AmazonSqsPrincipalAuthNotificationType, EmailNotificationType, SmsNotificationType, WebhookNotificationType");
    }

    /**
     * Get the actual instance, which can be the following:
     * AmazonSqsNotificationType, AmazonSqsPrincipalAuthNotificationType, EmailNotificationType, SmsNotificationType, WebhookNotificationType
     *
     * @return The actual instance (AmazonSqsNotificationType, AmazonSqsPrincipalAuthNotificationType, EmailNotificationType, SmsNotificationType, WebhookNotificationType)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AmazonSqsNotificationType`. If the actual instance is not `AmazonSqsNotificationType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmazonSqsNotificationType`
     * @throws ClassCastException if the instance is not `AmazonSqsNotificationType`
     */
    public AmazonSqsNotificationType getAmazonSqsNotificationType() throws ClassCastException {
        return (AmazonSqsNotificationType)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AmazonSqsPrincipalAuthNotificationType`. If the actual instance is not `AmazonSqsPrincipalAuthNotificationType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AmazonSqsPrincipalAuthNotificationType`
     * @throws ClassCastException if the instance is not `AmazonSqsPrincipalAuthNotificationType`
     */
    public AmazonSqsPrincipalAuthNotificationType getAmazonSqsPrincipalAuthNotificationType() throws ClassCastException {
        return (AmazonSqsPrincipalAuthNotificationType)super.getActualInstance();
    }
    /**
     * Get the actual instance of `EmailNotificationType`. If the actual instance is not `EmailNotificationType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EmailNotificationType`
     * @throws ClassCastException if the instance is not `EmailNotificationType`
     */
    public EmailNotificationType getEmailNotificationType() throws ClassCastException {
        return (EmailNotificationType)super.getActualInstance();
    }
    /**
     * Get the actual instance of `SmsNotificationType`. If the actual instance is not `SmsNotificationType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SmsNotificationType`
     * @throws ClassCastException if the instance is not `SmsNotificationType`
     */
    public SmsNotificationType getSmsNotificationType() throws ClassCastException {
        return (SmsNotificationType)super.getActualInstance();
    }
    /**
     * Get the actual instance of `WebhookNotificationType`. If the actual instance is not `WebhookNotificationType`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `WebhookNotificationType`
     * @throws ClassCastException if the instance is not `WebhookNotificationType`
     */
    public WebhookNotificationType getWebhookNotificationType() throws ClassCastException {
        return (WebhookNotificationType)super.getActualInstance();
    }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NotificationType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    // validate oneOf schemas one by one
    int validCount = 0;
    ArrayList<String> errorMessages = new ArrayList<>();
    // validate the json string with AmazonSqsNotificationType
    try {
      AmazonSqsNotificationType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AmazonSqsNotificationType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with AmazonSqsPrincipalAuthNotificationType
    try {
      AmazonSqsPrincipalAuthNotificationType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for AmazonSqsPrincipalAuthNotificationType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with EmailNotificationType
    try {
      EmailNotificationType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for EmailNotificationType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with SmsNotificationType
    try {
      SmsNotificationType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for SmsNotificationType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    // validate the json string with WebhookNotificationType
    try {
      WebhookNotificationType.validateJsonElement(jsonElement);
      validCount++;
    } catch (Exception e) {
      errorMessages.add(String.format("Deserialization for WebhookNotificationType failed with `%s`.", e.getMessage()));
      // continue to the next one
    }
    if (validCount != 1) {
      throw new IOException(String.format("The JSON string is invalid for NotificationType with oneOf schemas: AmazonSqsNotificationType, AmazonSqsPrincipalAuthNotificationType, EmailNotificationType, SmsNotificationType, WebhookNotificationType. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
    }
  }

 /**
  * Create an instance of NotificationType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NotificationType
  * @throws IOException if the JSON string is invalid with respect to NotificationType
  */
  public static NotificationType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationType.class);
  }

 /**
  * Convert an instance of NotificationType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

