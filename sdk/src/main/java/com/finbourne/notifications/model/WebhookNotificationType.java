/*
 * FINBOURNE Notifications API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.notifications.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.notifications.JSON;

/**
 * The information required to create or update a Webhook notification
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WebhookNotificationType {
  /**
   * The type of delivery mechanism for this notification
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    WEBHOOK("Webhook");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  private String httpMethod;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_AUTHENTICATION_TYPE = "authenticationType";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_TYPE)
  private String authenticationType;

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONFIGURATION_ITEM_PATHS = "authenticationConfigurationItemPaths";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONFIGURATION_ITEM_PATHS)
  private Map<String, String> authenticationConfigurationItemPaths;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private Object content = null;

  public WebhookNotificationType() {
  }

  public WebhookNotificationType type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of delivery mechanism for this notification
   * @return type
  **/
  @jakarta.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public WebhookNotificationType httpMethod(String httpMethod) {
    
    this.httpMethod = httpMethod;
    return this;
  }

   /**
   * The HTTP method such as GET, POST, etc. to use on the request
   * @return httpMethod
  **/
  @jakarta.annotation.Nonnull
  public String getHttpMethod() {
    return httpMethod;
  }


  public void setHttpMethod(String httpMethod) {
    this.httpMethod = httpMethod;
  }


  public WebhookNotificationType url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL to send the request to
   * @return url
  **/
  @jakarta.annotation.Nonnull
  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public WebhookNotificationType authenticationType(String authenticationType) {
    
    this.authenticationType = authenticationType;
    return this;
  }

   /**
   * The type of authentication to use on the request, can be one of the following values:  - Lusid - Internal LUSID call  - BasicAuth - User specified Username and password  - BearerToken - Authorization header with Bearer scheme and user specified key  - None - No Authorization required on the webhook call
   * @return authenticationType
  **/
  @jakarta.annotation.Nonnull
  public String getAuthenticationType() {
    return authenticationType;
  }


  public void setAuthenticationType(String authenticationType) {
    this.authenticationType = authenticationType;
  }


  public WebhookNotificationType authenticationConfigurationItemPaths(Map<String, String> authenticationConfigurationItemPaths) {
    
    this.authenticationConfigurationItemPaths = authenticationConfigurationItemPaths;
    return this;
  }

  public WebhookNotificationType putAuthenticationConfigurationItemPathsItem(String key, String authenticationConfigurationItemPathsItem) {
    if (this.authenticationConfigurationItemPaths == null) {
      this.authenticationConfigurationItemPaths = new HashMap<>();
    }
    this.authenticationConfigurationItemPaths.put(key, authenticationConfigurationItemPathsItem);
    return this;
  }

   /**
   * The paths of the Configuration Store configuration items that contain the authentication configuration. Each  authentication type requires different keys:  - Lusid - None required  - BasicAuth - Requires &#39;Username&#39; and &#39;Password&#39;  - BearerToken - Requires &#39;BearerToken&#39; and optionally &#39;BearerScheme&#39;  - None - None required     e.g. the following would be valid assuming that the config is present in the configuration store at the  specified paths:      \&quot;authenticationType\&quot;: \&quot;BasicAuth\&quot;,   \&quot;authenticationConfigurationItemPaths\&quot;: {   \&quot;Username\&quot;: \&quot;config://personal/myUserId/WebhookConfigurations/ExampleService/AdminUser\&quot;,   \&quot;Password\&quot;: \&quot;config://personal/myUserId/WebhookConfigurations/ExampleService/AdminPassword\&quot;   }
   * @return authenticationConfigurationItemPaths
  **/
  @jakarta.annotation.Nullable
  public Map<String, String> getAuthenticationConfigurationItemPaths() {
    return authenticationConfigurationItemPaths;
  }


  public void setAuthenticationConfigurationItemPaths(Map<String, String> authenticationConfigurationItemPaths) {
    this.authenticationConfigurationItemPaths = authenticationConfigurationItemPaths;
  }


  public WebhookNotificationType contentType(String contentType) {
    
    this.contentType = contentType;
    return this;
  }

   /**
   * The type of the content e.g. Json
   * @return contentType
  **/
  @jakarta.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }


  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public WebhookNotificationType content(Object content) {
    
    this.content = content;
    return this;
  }

   /**
   * The content of the request
   * @return content
  **/
  @jakarta.annotation.Nullable
  public Object getContent() {
    return content;
  }


  public void setContent(Object content) {
    this.content = content;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookNotificationType webhookNotificationType = (WebhookNotificationType) o;
    return Objects.equals(this.type, webhookNotificationType.type) &&
        Objects.equals(this.httpMethod, webhookNotificationType.httpMethod) &&
        Objects.equals(this.url, webhookNotificationType.url) &&
        Objects.equals(this.authenticationType, webhookNotificationType.authenticationType) &&
        Objects.equals(this.authenticationConfigurationItemPaths, webhookNotificationType.authenticationConfigurationItemPaths) &&
        Objects.equals(this.contentType, webhookNotificationType.contentType) &&
        Objects.equals(this.content, webhookNotificationType.content);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, httpMethod, url, authenticationType, authenticationConfigurationItemPaths, contentType, content);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookNotificationType {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    authenticationConfigurationItemPaths: ").append(toIndentedString(authenticationConfigurationItemPaths)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("httpMethod");
    openapiFields.add("url");
    openapiFields.add("authenticationType");
    openapiFields.add("authenticationConfigurationItemPaths");
    openapiFields.add("contentType");
    openapiFields.add("content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("httpMethod");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("authenticationType");
    openapiRequiredFields.add("contentType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to WebhookNotificationType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookNotificationType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookNotificationType is not found in the empty JSON string", WebhookNotificationType.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookNotificationType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("authenticationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authenticationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authenticationType").toString()));
      }
      if (!jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookNotificationType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookNotificationType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookNotificationType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookNotificationType.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookNotificationType>() {
           @Override
           public void write(JsonWriter out, WebhookNotificationType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookNotificationType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookNotificationType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookNotificationType
  * @throws IOException if the JSON string is invalid with respect to WebhookNotificationType
  */
  public static WebhookNotificationType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookNotificationType.class);
  }

 /**
  * Convert an instance of WebhookNotificationType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
